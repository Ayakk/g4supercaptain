import json
import hashlib
import requests
import time
import random
from tkinter import *
from tkinter.ttk import *

# API Call↓↓
def getMarvelCharacter():  # maakt verbinding met de marvel server en haalt een aantal superheroes op. pakt 1 random superhero met de criteria "has description"
    public_key = '4948dd2ad64f8a47c7e882325121c4b2'
    private_key = 'c8a4085bf1d97e3f1d3615f458986467ed40009a'
    timestamp = str(time.time())  # pakt huidige tijd
    hash_material = timestamp + private_key + public_key  # zet de tijd, private key en public key als 1 string
    pre_hashed = hashlib.md5(hash_material.encode())  # bovenstaaande string converted to bytecode
    hashed = pre_hashed.hexdigest()  # hier wordt de MD5 hash gegenereerd
    character_random_interval = str(
        random.randint(100, 1000))  # zorgt ervoor dat de set gekozen characters random blijven
    character_limit = "100"
    param = {"ts": timestamp,  # wat de Marvel server vereist om te functioneren
             'apikey': '4948dd2ad64f8a47c7e882325121c4b2',  # public_key
             "hash": hashed,
             "limit": character_limit,
             "offset": character_random_interval
             }
    url = 'https://gateway.marvel.com:443/v1/public/characters'
    response = requests.get(url, params=param)
    response = response.json()
    text = json.dumps(response, indent=4) #formateerd text om in een bestand op te slaan
    with open('characters.txt', 'w+') as f:
        f.write(text)
    with open('characters.txt', 'r') as f:
        text = json.load(f) #Haalt data op voor gebruik in programma
    teller = 0
    begin_character_lijst = []
    alle_character_lijst = []
    einde_character_lijst = []

    for i in range(9):
        alle_character_lijst.append(text["data"]["results"][random.randint(0, 50)])

    for i in text["data"]["results"]: #maakt een dictionary met gegevens van het juiste character op
        if len(text["data"]["results"][teller]["description"]) > 5:
            begin_character_lijst.append(text["data"]["results"][teller])
        teller += 1
    einde_character_lijst.append(begin_character_lijst[random.randint(0, (len(begin_character_lijst) - 1))])
    return einde_character_lijst, alle_character_lijst
# API Call↑↑

def getMarvelCharacterHint(character_lijst):  # splits de description in delen aan de hand van comma's
    character_hint = character_lijst[0]["description"]
    if "," in character_hint:
        character_hint = character_hint.split(",")
    elif "." in character_hint:
        character_hint = character_hint.split(".")
    return character_hint

def goed():
    global punten
    global totaal_punten
    totaal_punten += punten
    punten = 25
    eindeSpel()
    return totaal_punten


def fout(soort):
    global punten
    if punten == 1:
        eindeSpel()
    elif soort == "hint":
        punten -= 3
    elif soort == "fout":
        punten -= 1

def highscorefile():
    highscore = open("SuperGuesserHighscore.txt", "a")
    highscore.write(username + ": " + str(totaal_punten) + ",")

#------------------------------------------------------Hier begint het programma----------------------------------------

def getInfo():
    global character_name
    global right_character_info
    global wrong_character_info
    global character_hints
    all_character_info = getMarvelCharacter() # haalt 2 lijsten op, eentje met de juiste hero en eentje met 9 random
    all_wrong_character_info = all_character_info[1] #haalt een lijst op van dictionaries met character informatie
    wrong_character_info = []
    for i in range((len(all_wrong_character_info))): #haalt alleen de namen op van alle random characters
        if all_wrong_character_info[i]["name"] not in wrong_character_info:
            wrong_character_info.append(all_wrong_character_info[i]["name"])
    right_character_info = list(all_character_info[0])#haalt de informatie op van de superhero
    character_name = right_character_info[0]["name"] # dit is de naam va de superhero
    print(character_name)  # naam van de goeie character, voor test
    wrong_character_info.append(character_name) # zet de naam van de superhero in de lijst met random
    random.shuffle(wrong_character_info) # haalt alle namen door elkaar anders staat de juiste naam altijd onderaan
    print(wrong_character_info) # lijst met de mogelijke characters, voor test
    if type(character_name) == 'list':
        character_name = character_name[0]

    character_hints = getMarvelCharacterHint(right_character_info)  # haalt hints op van de superhero
    verwijder_name_hint = ""
    for i in range(0, len(character_hints)):  # haalt de naam van de superhero uit de hint
        if character_name in character_hints[i]:
            character_hints[i] = character_hints[i].replace(character_name, "Hero")

character_name = ""
right_character_info = []
wrong_character_info = []

character_hints = []
getInfo()
punten = 25
totaal_punten = 0

#----------------Hier begint het spel-----------------------------------------------------------------------------------

gui = Tk()
gui.title("SuperGuesser")
gui.geometry("1000x750")
welcome_gui = Toplevel()
welcome_gui.geometry("1000x750")
end_gui = Toplevel()
end_gui.geometry("1000x750")


def getMainGui(event):
    global username
    if len(input_username.get()) > 2: # Controleert of gebruikersnaam ingevuld is en haalt de main scherm op
        username = input_username.get()
        label_username = Label(gui, text="Jouw gebruikersnaam is: " + username, font="Arial 12 italic").place(x=0, y=scoreLabelY + 40)
        gui.deiconify()  # Unhides the root window
        welcome_gui.destroy()  # Removes the toplevel window
    elif len(input_username.get()) <= 2:
        input_label_username_tekort = Label(welcome_gui, text = 'Uw gebruikersnaam is te kort. Het moet minimaal uit 3 tekens bestaan.')
        input_username_tekort = Entry(welcome_gui)
        input_username_tekort.bind('<Return>', getMainGui)
        input_label_username_tekort.pack()

#--------------------------Widgets eerste gui-------------------------------

username = ""
input_label_username = Label(welcome_gui, text="Vul hieronder jouw gebruikersnaam en druk op 'Enter'")
input_username = Entry(welcome_gui)
input_username.bind('<Return>', getMainGui)
input_label_username.pack()
input_username.pack()

#MAAK DE WIDGETS
scoreLabelY = 0
# score = Label(gui, text="Je hebt " + str(punten) + " punten!", font="Arial 12").place(x=0, y=scoreLabelY)
tot_score = Label(gui, text="Je hebt in totaal " + str(totaal_punten) + " punten!", font="Arial 12").place(x=0, y=scoreLabelY+20)

def check_antwoord(entry):
    print("functie")#testen
    print(antwoordInput.get()) #testen
    global tot_score
    global highscoreScore
    if antwoordInput.get() == character_name:
        print("test")#testen
        highscoreScore = Label(gui, text="Score: " + str(punten), font="Arial 12").place(x=0,y=0)
        goed()
        print(totaal_punten)
        tot_score = Label(gui, text="Je hebt in totaal " + str(totaal_punten) + " punten!", font="Arial 12").place(x=0,y=scoreLabelY + 20)
        antwoordStatusLabel = Label(gui, text="Correct!")
        antwoordStatusLabel.place(x=150, y=120)
        canvasRoepen()
    else:
        antwoordStatusLabel = Label(gui, text="Wrong!")
        antwoordStatusLabel.place(x=150, y=120)
        fout("fout")
        tot_score = Label(gui, text="Je hebt in totaal " + str(totaal_punten) + " punten!", font="Arial 12").place(x=0,y=scoreLabelY + 20)
        canvasScoreRoepen()
        highscoreScore = Label(gui, text="Score: " + str(punten), font="Arial 12")
        highscoreScore.place(x=0, y=0)


def eindeSpel():
    gui.withdraw()
    end_gui.deiconify()


#HIER KAN JE EEN ANTWOORD INVOEREN
antwoordLabel = Label(gui, text="Fill answer. Press Enter")
antwoordLabel.place(x=0, y=100)
antwoordInput = Entry(gui)
antwoordInput.place(x=0, y=120)
antwoordInput.bind('<Return>', check_antwoord)

def leesNaam():
    with open('SuperGuesserHighscore.txt', 'a+') as e: # Maakt het bestand aan als het het nog niet bestaat
        e.read()
    with open('SuperGuesserHighscore.txt', "r+") as f:
    # use readlines to read all lines in the file
    # The variable "lines" is a list containing all lines in the file
        lines = f.readlines()
        return str(lines).replace('[', '').replace(']','').replace(',', '\n').replace("'", "")

highscoreLabelY = scoreLabelY + 60
highscoreScoreLabelY = highscoreLabelY + 50
highscoreLabel = Label(gui, text="HIGHSCORE LIJST:", font="Arial 12 bold").place(x=360, y=200)
# highscorePositie = Label(gui, text="Positie: ", font="Arial 12 italic").place(x=0, y=highscoreScoreLabelY)
highscoreNaam = Label(gui, text=str(leesNaam()) + "\n", font="Arial 12 italic").place(x=360, y=220)
highscoreScore = Label(gui, text="Score: " + str(punten), font="Arial 12").place(x=0, y=0)


highscoreLabelY = scoreLabelY + 60
highscoreScoreLabelY = highscoreLabelY + 50
highscoreLabel = Label(gui, text="HIGHSCORE LIJST:", font="Arial 12 bold").place(x=360, y=200)
# highscorePositie = Label(gui, text="Positie: ", font="Arial 12 italic").place(x=0, y=highscoreScoreLabelY)
highscoreNaam = Label(gui, text=str(leesNaam()) + "\n", font="Arial 12 italic").place(x=360, y=220)
highscoreScore = Label(gui, text="Score: " + str(punten), font="Arial 12").place(x=0, y=0)

hintLijstY = 520
#geef hint
def hint_geven():
    global punten
    global character_hints
    global inhoudHintlijst
    global highscoreScore
    global hintLijstY
    if len(character_hints) == 0:
        inhoudHintlijst = Label(gui, text="Er zijn geen hints meer. U moet een gokje wagen", font="Arial 12 italic").place(x=0, y=hintLijstY)
        return 0
    elif punten <= 3:
        inhoudHintlijst = Label(gui, text="U heeft te weinig punten om een hint te vragen. U moet een gokje wagen\n", font="Arial 12 italic").place(x=0, y=hintLijstY)
        return 0
    else:
        highscoreScore = Label(gui, text="Score: " + str(punten), font="Arial 12")
        highscoreScore.place(x=0,y=0)
        inhoudHintlijst = Label(gui, text=character_hints[0], font="Arial 12 italic")
        inhoudHintlijst.place(x=0, y=hintLijstY)
        hintLijstY+=25
        character_hints.pop(0)
        fout("hint")


hints = Label(gui, text="HINTLIJST:", font="Arial 12 bold")
hints.place(x=0, y=500)
inhoudHintlijst = Label(gui, text=character_hints[0], font="Arial 12 italic")
inhoudHintlijst.place(x=0, y=520)

#MAAK DE HINTKNOP
hintbutton = Button(gui, text="HINT", command=hint_geven).place(x=900, y=0)

#LABEL VOOR ALLE MOGELIJKE HELDEN
heldenlabelTitel = Label(gui, text="Alle mogelijke keuzes: ", font="Arial 12 bold").place(x=0, y=200)
heldenlabel = Label(gui, text=str(wrong_character_info).replace(",", "\n").replace("[", "").replace("]", ""), font="Arial 12").place(x=0,y=220)

#FUNCTIES VOOR CONTINUE EN QUIT
def continue_Button_F():
    global highscoreScore
    global hintLijstY
    getInfo()
    end_gui.withdraw()
    refreshIO()
    gui.deiconify()
    hintLijstY = 520
    highscoreScore = Label(gui, text="Score: " + str(punten), font="Arial 12").place(x=0,y=0)



def quit_Button_F():
    highscorefile()
    quit()


def refreshIO():
    global antwoordStatusLabel
    global heldenlabel
    global antwoordInput
    global inhoudHintlijst
    lege_spatie = " "
    inhoudHintlijstSpatie = str(((lege_spatie*1000)+"\n"+(lege_spatie*1000))*8)
    antwoordStatusLabel = Label(gui, text =(lege_spatie*15))
    antwoordStatusLabel.place(x=150, y=120)
    heldenlabel = Label(gui, text=str(wrong_character_info).replace(",", "\n").replace("[", "").replace("]", ""), font="Arial 12").place(x=0,y=220)
    inhoudHintlijst = Label(gui, text=inhoudHintlijstSpatie, font="Arial 12 italic").place(x=0, y=520)
    inhoudHintlijst = Label(gui, text=character_hints[0], font="Arial 12 italic")
    inhoudHintlijst.place(x=0, y=520)

    antwoordInput = Entry(gui)
    antwoordInput.place(x=0, y=120)
    antwoordInput.bind('<Return>', check_antwoord)

antwoordStatusLabel = Label()

#CANVAS
def canvasRoepen():
    coverupCanvasKeuzes = Canvas(gui, height=200, width=355).place(x=0, y=220)
    coverupCanvas = Canvas(gui, height=200, width=1000).place(x=0, y=520)
def canvasScoreRoepen():
    coverupScore = Canvas(gui, height=15, width=100).place(x=0, y=0)


#KNOPPEN CONTINUE EN QUIT
continueButton = Button(end_gui, text="CONTINUE", command=continue_Button_F).place(x=800, y=0)
quitButton = Button(end_gui, text="QUIT", command=quit_Button_F).place(x=900, y=0)
quitButton = Button(gui, text="QUIT", command=quit_Button_F).place(x=800, y=0)

#VOEG AFBEELDING
img = PhotoImage(file="logo.png")
afb = Label(welcome_gui, image=img)
afb2 = Label(end_gui, image=img)
afb.place(x=250, y=270)
afb2.place(x=250, y=270)

end_gui.withdraw()
gui.withdraw()
gui.mainloop() #houdt programma draaiend
